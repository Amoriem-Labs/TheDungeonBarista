#if UNITY_EDITOR
using System;
using System.IO;
using System.Linq;
using System.Text;
using UnityEditor;
using UnityEditor.SceneManagement;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.SceneManagement;

public static class UITemplateCreateUtility
{
    // Scan these folders for prefabs
    private const string ButtonsFolder = "Assets/Resources/Prefabs/UI/TemplateButtons";
    private const string TextsFolder   = "Assets/Resources/Prefabs/UI/TemplateTexts";

    // Where we write the compiled menu entries
    private const string GeneratedDir  = "Assets/Editor/_Generated";
    private const string GeneratedPath = GeneratedDir + "/UITemplateGeneratedMenu.cs";

    private const int BasePriority = 1000; // near Unity's UI items

    // -------------------- NEW: generate once if missing --------------------
    [InitializeOnLoadMethod]
    private static void AutoGenerateIfMissing()
    {
        // Only generate when the file truly doesn't exist (no content diffing here),
        // so focusing the editor won't cause any domain reloads.
        if (!File.Exists(GeneratedPath))
        {
            // Defer until the editor is fully initialized to avoid AssetDatabase timing issues
            EditorApplication.delayCall += () =>
            {
                // Still guard in case a parallel import produced it
                if (!File.Exists(GeneratedPath))
                {
                    GenerateMenus();
                    Debug.Log("[UI Templates] Generated menu file on first use (was missing).");
                }
            };
        }
    }
    
    
    // -------------------- Manual commands (no automatic regeneration) --------------------

    [MenuItem("Tools/UI Templates/Generate Template Menus")]
    public static void GenerateMenus()
    {
        Directory.CreateDirectory(GeneratedDir);

        var buttons = LoadPrefabAssetPaths(ButtonsFolder);
        var texts   = LoadPrefabAssetPaths(TextsFolder);

        var sb = new StringBuilder();
        sb.AppendLine("// AUTO-GENERATED by UITemplateCreateUtility.GenerateMenus()");
        sb.AppendLine("// This file contains real [MenuItem] entries per prefab.");
        sb.AppendLine("#if UNITY_EDITOR");
        sb.AppendLine("using UnityEditor;");
        sb.AppendLine("using UnityEngine;");
        sb.AppendLine("using UnityEditor.SceneManagement;");
        sb.AppendLine("using UnityEngine.EventSystems;");
        sb.AppendLine("using UnityEngine.SceneManagement;");
        sb.AppendLine();
        sb.AppendLine("static class UITemplateGeneratedMenu");
        sb.AppendLine("{");

        int i = 0;

        foreach (var path in buttons)
        {
            var name = Path.GetFileNameWithoutExtension(path);
            var method = SafeId($"Create_Buttons_{name}");
            var validate = method + "_Validate";
            var menuPath = $"GameObject/UI/Template Buttons/{EscapeMenu(name)}";

            sb.AppendLine($"    [MenuItem(\"{menuPath}\", false, {BasePriority + i})]");
            sb.AppendLine($"    private static void {method}(MenuCommand cmd) => UITemplateCreateUtility.CreateFromPrefabPath(\"{path}\", cmd);");
            sb.AppendLine($"    [MenuItem(\"{menuPath}\", true)]");
            sb.AppendLine($"    private static bool {validate}(MenuCommand cmd) => UITemplateCreateUtility.CanCreateFromPrefab(\"{path}\");");
            sb.AppendLine();
            i++;
        }

        foreach (var path in texts)
        {
            var name = Path.GetFileNameWithoutExtension(path);
            var method = SafeId($"Create_Texts_{name}");
            var validate = method + "_Validate";
            var menuPath = $"GameObject/UI/Template Texts/{EscapeMenu(name)}";

            sb.AppendLine($"    [MenuItem(\"{menuPath}\", false, {BasePriority + i})]");
            sb.AppendLine($"    private static void {method}(MenuCommand cmd) => UITemplateCreateUtility.CreateFromPrefabPath(\"{path}\", cmd);");
            sb.AppendLine($"    [MenuItem(\"{menuPath}\", true)]");
            sb.AppendLine($"    private static bool {validate}(MenuCommand cmd) => UITemplateCreateUtility.CanCreateFromPrefab(\"{path}\");");
            sb.AppendLine();
            i++;
        }

        if (i == 0)
        {
            sb.AppendLine("    // No templates found.");
            sb.AppendLine("    [MenuItem(\"GameObject/UI/Template Buttons (none)\", true)] private static bool _V(MenuCommand c)=>false;");
        }

        sb.AppendLine("}");
        sb.AppendLine("#endif");

        var newText = sb.ToString();
        if (!File.Exists(GeneratedPath) || File.ReadAllText(GeneratedPath) != newText)
        {
            File.WriteAllText(GeneratedPath, newText, new UTF8Encoding(false));
            AssetDatabase.ImportAsset(GeneratedPath);
            Debug.Log($"[UI Templates] Generated menu file with {i} entries:\n{GeneratedPath}");
        }
        else
        {
            Debug.Log("[UI Templates] No changes in templates. Skipped rewriting generated file.");
        }
    }

    [MenuItem("Tools/UI Templates/Delete Generated Menu File")]
    public static void DeleteGeneratedMenus()
    {
        if (File.Exists(GeneratedPath))
        {
            File.Delete(GeneratedPath);
            if (File.Exists(GeneratedPath + ".meta")) File.Delete(GeneratedPath + ".meta");
            AssetDatabase.Refresh();
            Debug.Log("[UI Templates] Generated menu file deleted.");
        }
        else
        {
            Debug.Log("[UI Templates] No generated menu file to delete.");
        }
    }

    // -------------------- Shared creation helpers (used by generated file) ---------------

    public static bool CanCreateFromPrefab(string assetPath)
        => AssetDatabase.LoadAssetAtPath<GameObject>(assetPath) != null;

    public static void CreateFromPrefabPath(string assetPath, MenuCommand cmd)
    {
        var prefab = AssetDatabase.LoadAssetAtPath<GameObject>(assetPath);
        if (prefab == null) return;

        var scene   = SceneManager.GetActiveScene();
        var go      = (GameObject)PrefabUtility.InstantiatePrefab(prefab, scene);
        Undo.RegisterCreatedObjectUndo(go, "Create " + prefab.name);

        // Prefer right-clicked UI parent if valid; otherwise ensure a Canvas.
        Transform parent = null;
        if (cmd?.context is GameObject ctx
            && ctx.transform is RectTransform
            && ctx.GetComponentInParent<Canvas>() != null)
        {
            parent = ctx.transform;
        }
        else
        {
            parent = EnsureCanvas().transform;
        }

        GameObjectUtility.SetParentAndAlign(go, parent.gameObject);

        if (go.TryGetComponent<RectTransform>(out var rt))
        {
            rt.anchoredPosition = Vector2.zero;
            rt.localScale = Vector3.one;
        }

        Selection.activeObject = go;
        EditorSceneManager.MarkSceneDirty(scene);
    }

    private static Canvas EnsureCanvas()
    {
        var canvas = UnityEngine.Object.FindFirstObjectByType<Canvas>();
        if (canvas != null) { EnsureEventSystem(); return canvas; }

        var go = new GameObject("Canvas",
            typeof(RectTransform),
            typeof(UnityEngine.UI.CanvasScaler),
            typeof(UnityEngine.UI.GraphicRaycaster));
        canvas = go.GetComponent<Canvas>();
        canvas.renderMode = RenderMode.ScreenSpaceOverlay;
        Undo.RegisterCreatedObjectUndo(go, "Create Canvas");
        EnsureEventSystem();
        return canvas;
    }

    private static void EnsureEventSystem()
    {
        if (UnityEngine.Object.FindFirstObjectByType<EventSystem>() != null) return;
        var es = new GameObject("EventSystem", typeof(EventSystem), typeof(StandaloneInputModule));
        Undo.RegisterCreatedObjectUndo(es, "Create EventSystem");
    }

    // -------------------- Utilities ------------------------------------------------------

    private static string[] LoadPrefabAssetPaths(string rootFolder)
    {
        if (!AssetDatabase.IsValidFolder(rootFolder)) return Array.Empty<string>();
        var guids = AssetDatabase.FindAssets("t:Prefab", new[] { rootFolder });
        return guids
            .Select(AssetDatabase.GUIDToAssetPath)
            .Where(p => p.EndsWith(".prefab", StringComparison.OrdinalIgnoreCase))
            .OrderBy(p => Path.GetFileNameWithoutExtension(p), StringComparer.OrdinalIgnoreCase)
            .ToArray();
    }

    private static string SafeId(string s)
    {
        var chars = s.Select(c => char.IsLetterOrDigit(c) ? c : '_').ToArray();
        var id = new string(chars);
        if (id.Length == 0 || char.IsDigit(id[0])) id = "_" + id;
        return id;
    }

    private static string EscapeMenu(string s) => s.Replace("/", "／");
}
#endif
